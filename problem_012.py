def problem012Solver(n):
    """Returns the value of the first triangle number that has over n divisors."""

    guess = []
    x = 0
    while len(guess) < n:
        x += 1
        guess = factors(triangleNumber(x))
    return triangleNumber(x)

def triangleNumber(n):
    """Returns the nth triangle number.

    Parameters
    ----------
    n: an integer

    Output
    ----------
    the nth triangle number (sequence generated by adding natural numbers).

    Example
    ----------
    The sequence: 1, 3, 6, 10, 15, 21, 28, ...

    > print(triangleNumber(7))
    28
    """
    return int(n * (n + 1) / 2)

def factors(n):
    """Returns the factors of n.

    Parameters
    ----------
    n: an integer

    Output
    ----------
    a list of the factors of n

    Example
    ----------
    > print(factors(n))
    [1, 2, 4, 7, 14, 28]
    """

    factors = []
    for i in range(1, int(n**0.5) + 1):
        if n % i == 0:
            factors.append(i)
            if int(n / i) not in factors: # Don't include square-roots twice!
                factors.append(int(n / i))
    return sorted(factors)

if __name__ == "__main__":
    print(problem012Solver(500))
